import os
import shutil

def __error__(e):
    data = {
        "no_extension" : "Skipping: No extension found for",
        "creation_dir" : "Error during the creation of",
        "move_failed" : "Error during the move of"
    }
    return (data.get("%s" % e))

def __files__(directory):
    return (os.listdir(directory))

def __exists__(directory):
    if os.path.isdir(directory):
        return (1)
    if os.path.exists(directory):
        return (0)
    return (-1)

def __count_files__(directory, mod = False):
    i = 0
    count = 0
    list = __files__(directory)

    while i < len(list):
        if __exists__("%s/%s" % (directory, list[i])) == 0:
            count += 1
        i += 1
    if mod == True:
        if count > 1:
            print("%d files to sort\n" % count)
        elif count == 1:
            print("%d file to sort\n" % count)
        else:
            print("No file to sort")
            exit(0)
    return (i)

def __specials__(file_to_clean):
    i = 0
    character = 0
    count = 0

    while i < len(file_to_clean):
        character = ord(file_to_clean[i])
        if __is_special__(character) == 1:
            count += 1
        i += 1
    return (count)

def __is_special__(character):
    if character < 65 or character > 122 or (character > 91 and character < 97):
        return (1)
    return (0)

def __extension__(file_to_clean):
    i = 0
    ext = ""
    count = 0
    character = 0
    specials = __specials__(file_to_clean)

    while i < len(file_to_clean):
        character = ord(file_to_clean[i])
        if __is_special__(character) == 1:
            count += 1
        if count == specials and specials >= 1:
            ext += file_to_clean[i].lower()
        i += 1
    return (ext)

def __directory__(directory, cleanned):
    full_path = "%s/%s" % (directory, cleanned)
    if os.path.isdir(full_path) == False:
        os.mkdir(full_path)
    else:
        cleanned += "_%d" % __count_files__(full_path)
    return (cleanned)

def __cleaner__(directory, file_to_clean):
    i = 0
    count = 0
    cleanned = ""
    extension = __extension__(file_to_clean)
    specials = __specials__(file_to_clean)
    character = 0
    full_path = "%s/%s" % (directory, file_to_clean)

    while i < len(file_to_clean):
        character = ord(file_to_clean[i])
        if __is_special__(character) == 1:
            count += 1
        if count < 1:
            cleanned += file_to_clean[i].lower()
        i += 1
    if len(extension) == 0:
        print("%s '%s'" % (__error__("no_extension"), cleanned))
        return (0)
    elif len(cleanned) == 0:
        cleanned = "default"
    print("Source: %s" % (full_path))
    try:
        shutil.move("%s" % (full_path), "%s/%s/%s%s" % (directory, cleanned, __directory__(directory, cleanned), extension))
        print("Moved:  %s/%s/%s%s" % (directory, cleanned, __directory__(directory, cleanned), extension))
    except:
        print("%s '%s'" % (__error__("move_failed"), cleanned))
    return (0)

def __parser__(directory):
    files = None
    cleanned = None
    response = __exists__(directory)
    i = 0
    nb_files = 0 
    full_path = None

    if response == 1:
        files = __files__(directory)
        nb_files = __count_files__(directory, True)

        while i < nb_files:
            full_path = "%s/%s" % (directory, files[i])
            if __exists__(full_path) == 0:
                __cleaner__(directory, files[i])
            i += 1
        return (0)
    elif response == 0:
        print("Can't sort a file")
    else:
        print("Folder not found")
    return (84)

def afs():
    path = os.environ["PWD"]
    return (__parser__(path))

afs()
